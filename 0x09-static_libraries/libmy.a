!<arch>
3-strspn.c/     0           0     0     644     474       `
#include "main.h"

/**
 * _strspn - length of a prefix substring
 * @s: segment of bytes
 * @accept: only bytes
 * Return: the number of bytes in the initial segment of s
 *which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j;
	int c = 0;

	for (i = 0; s[i] != '\n'; i++)
	{
		if (s[i] != 32)
		{
			for (j = 0; accept[j] != '\0'; j++)
			{
				if (s[i] == accept[j])
					c++;
			}
		}
		else
			return (c);
	}
	return (c);
}
4-isalpha.c/    0           0     0     644     238       `
#include "main.h"

/**
* _isalpha - check for lower case letter
* @c : character to check
* Return: 1 if c is lowercase
*/
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
return (1);
}
else
{
return (0);
}
}
4-strpbrk.c/    0           0     0     644     431       `
#include <stdlib.h>
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string
 * @accept: bytes to search
 * Return: a pointer to the byte in s that matches one of the bytes in accept,
 *or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return (NULL);
}

5-strstr.c/     0           0     0     644     434       `
#include <stdlib.h>
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: long string
 * @needle: substring
 *
 * Return: pointer
 */
char *_strstr(char *haystack, char *needle)
{
	int i;
	int s = 0;

	while (needle[s] != '\0')
		s++;
	while (*haystack)
	{
		for (i = 0; needle[i]; i++)
		{
			if (haystack[i] != needle[i])
				break;
		}
		if (i != s)
			haystack++;
		else
			return (haystack);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     188       `
#include "main.h"
/**
* _abs - returns absolute value of an int
* @n: integer from which to get an absolute value
* Return: Always 0
*/
int _abs(int n)
{

return (n >= 0 ? n : n * -1);

}
